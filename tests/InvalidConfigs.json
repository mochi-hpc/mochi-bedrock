[
    {
        "test": "invalid ABT-IO section",
        "input": {"abt_io":123},
        "error": "\"abt_io\" field in configuration should be an array"
    },

    {
        "test": "invalid type of ABT-IO instance configuration",
        "input": {"abt_io":[123]},
        "error": "ABT-IO descriptors in JSON should be objects"
    },

    {
        "test": "invalid ABT-IO instance name",
        "input": {"abt_io":[{"name":123}]},
        "error": "ABT-IO instance name should be a string"
    },

    {
        "test": "ABT-IO instance without a pool",
        "input": {"abt_io":[{"name":"my_abt_io"}]},
        "error": "\"pool\" field required in ABT-IO instance configuration"
    },

    {
        "test": "invalid ABT-IO instance pool name",
        "input": {"abt_io":[{"pool":"abc"}]},
        "error": "Could not find pool \"abc\" from Margo instance"
    },

    {
        "test": "invalid ABT-IO instance pool index",
        "input": {"abt_io":[{"pool":42}]},
        "error": "Could not find pool at index 42 from Margo instance"
    },

    {
        "test": "invalid ABT-IO instance pool field type",
        "input": {"abt_io":[{"pool":true}]},
        "error": "\"pool\" field in ABT-IO instance configuration should be a string or an integer"
    },

    {
        "test": "invalid ABT-IO instance config field type",
        "input": {"abt_io":[{"pool":"__primary__","config":true}]},
        "error": "\"config\" field in ABT-IO instance configuration should be an object"
    },

    {
        "test": "two ABT-IO instances with the same name",
        "input": {"abt_io":[{"name":"my_abt_io","pool":"__primary__"},{"name":"my_abt_io","pool":"__primary__"}]},
        "error": "ABT-IO instance name \"my_abt_io\" already used"
    },


    {
        "test": "invalid mona section type",
        "input": {"mona":123},
        "error": "\"mona\" field should be an array"
    },

    {
        "test": "invalid mona instance type",
        "input": {"mona":[123]},
        "error": "MoNA instance should be of an object"
    },

    {
        "test": "invalid type for mona instance name",
        "input": {"mona":[{"name":123}]},
        "error": "MoNA instance name should be a string"
    },

    {
        "test": "missing pool field in mona instance",
        "input": {"mona":[{"name":"my_mona"}]},
        "error": "\"pool\" field required in MoNA instance configuration"
    },

    {
        "test": "invalid MoNA instance pool field type",
        "input": {"mona":[{"pool":true}]},
        "error": "\"pool\" field in MoNA instance configuration should be a string or an integer"
    },

    {
        "test": "two MoNA instances with the same name",
        "input": {"mona":[{"name":"my_mona","pool":"__primary__"},{"name":"my_mona","pool":"__primary__"}]},
        "error": "MoNA instance name \"my_mona\" already used"
    },

    {
        "test": "invalid MoNA instance pool name",
        "input": {"mona":[{"pool":"abc"}]},
        "error": "Could not find pool \"abc\" from Margo instance"
    },

    {
        "test": "invalid MoNA instance pool index",
        "input": {"mona":[{"pool":42}]},
        "error": "Could not find pool at index 42 from Margo instance"
    },

    {
        "test": "invalid MoNA instance address type",
        "input": {"mona":[{"pool":"__primary__","address":123}]},
        "error": "\"address\" field in MoNA description should be a string"
    },

    {
        "test": "invalid MoNA address",
        "input": {"mona":[{"name":"my_mona","pool":"__primary__","address":"abc"}]},
        "error": "Could not initialize mona instance \"my_mona\""
    },


    {
        "test": "invalid type for libraries field",
        "input": {"libraries":123},
        "error": "\"libraries\" field should be an object"
    },

    {
        "test": "invalid type for library",
        "input": {"libraries":{"module_a":123}},
        "error": "Module library for module_a should be a string or null"
    },

    {
        "test": "library not found",
        "input": {"libraries":{"module_a":"abc.so"}},
        "error": "Could not dlopen library abc.so: abc.so: cannot open shared object file: No such file or directory"
    },

    {
        "test": "invalid type of provider field",
        "input": {"providers":true},
        "error": "Invalid JSON configuration passed to ProviderManager::addProviderListFromJSON (should be an array)"
    },

    {
        "test": "invalid type of provider definition",
        "input": {"providers":[true]},
        "error": "Invalid JSON configuration passed to ProviderManager::addProviderFromJSON (should be an object)"
    },

    {
        "test": "invalid provider type in provider definition",
        "input": {"providers":[{"name":"my_provider","provider_id":123,"type":"module_a"}]},
        "error": "Could not find service factory for provider type \"module_a\""
    },

    {
        "test": "invalid type for provider name in provider definition",
        "input": {"libraries":{"module_a":"libModuleA.so"},"providers":[{"name":true,"provider_id":123,"type":"module_a"}]},
        "error": "\"name\" field in provider definition should be a string"
    },

    {
        "test": "invalid type for provider type in provider definition",
        "input": {"libraries":{"module_a":"libModuleA.so"},"providers":[{"name":"my_provider","provider_id":123,"type":true}]},
        "error": "\"type\" field in provider definition should be a string"
    },

    {
        "test": "invalid type for provider_id in provider definition",
        "input": {"libraries":{"module_a":"libModuleA.so"},"providers":[{"name":"my_provider","provider_id":true,"type":"module_a"}]},
        "error": "\"provider_id\" field in provider definition should be an integer"
    },

    {
        "test": "invalid provider_id value in provider definition",
        "input": {"libraries":{"module_a":"libModuleA.so"},"providers":[{"name":"my_provider","provider_id":-1,"type":"module_a"}]},
        "error": "\"provider_id\" field in provider definition should be a positive integer"
    },

    {
        "test": "invalid config type in provider definition",
        "input": {"libraries":{"module_a":"libModuleA.so"},"providers":[{"name":"my_provider","provider_id":123,"type":"module_a","config":true}]},
        "error": "\"config\" field in provider definition should be an object"
    },

    {
        "test": "invalid pool type in provider definition",
        "input": {"libraries":{"module_a":"libModuleA.so"},"providers":[{"name":"my_provider","provider_id":123,"type":"module_a","pool":true}]},
        "error": "\"pool\" field in provider definition should be a string or an unsigned integer"
    },

    {
        "test": "invalid pool name in provider definition",
        "input": {"libraries":{"module_a":"libModuleA.so"},"providers":[{"name":"my_provider","provider_id":123,"type":"module_a","pool":"abc"}]},
        "error": "Could not find pool \"abc\" from Margo instance"
    },

    {
        "test": "invalid pool index in provider definition",
        "input": {"libraries":{"module_a":"libModuleA.so"},"providers":[{"name":"my_provider","provider_id":123,"type":"module_a","pool":1234}]},
        "error": "Could not find pool at index 1234 from Margo instance"
    },

    {
        "test": "empty provider name in provider definition",
        "input": {"libraries":{"module_a":"libModuleA.so"},"providers":[{"name":"","provider_id":123,"type":"module_a"}]},
        "error": "Provider name cannot be empty"
    },

    {
        "test": "two providers with the same name",
        "input": {"libraries":{"module_a":"libModuleA.so"},"providers":[{"name":"my_provider","provider_id":1,"type":"module_a"},{"name":"my_provider","provider_id":2,"type":"module_a"}]},
        "error": "Could not register provider: a provider with the name \"my_provider\" is already registered"
    },

    {
        "test": "two providers with the same provider id",
        "input": {"libraries":{"module_a":"libModuleA.so"},"providers":[{"name":"my_provider1","provider_id":42,"type":"module_a"},{"name":"my_provider2","provider_id":42,"type":"module_a"}]},
        "error": "Could not register provider: a provider with the type \"module_a\" and provider id 42 is already registered"
    }

]
